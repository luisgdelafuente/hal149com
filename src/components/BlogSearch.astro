---
interface Props {
  lang: 'en' | 'es';
}

const { lang } = Astro.props;

const searchContent = {
  en: {
    placeholder: "Search posts...",
    noResults: "No posts found matching your search.",
    resultsCount: "posts found"
  },
  es: {
    placeholder: "Buscar artículos...",
    noResults: "No se encontraron artículos que coincidan con tu búsqueda.",
    resultsCount: "artículos encontrados"
  }
};

const currentContent = searchContent[lang];
---

<div class="mb-8">
  <!-- Search Input -->
  <div class="relative max-w-sm sm:max-w-md mx-auto">
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <svg class="h-5 w-5 text-bs-foreground-dark" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </div>
    <input
      type="text"
      id="search-input"
      class="block w-full pl-10 pr-3 py-2 sm:py-3 border border-bs-surface-3 rounded-lg bg-bs-surface-0/90 text-bs-foreground-light placeholder-bs-foreground-dark focus:outline-none focus:ring-2 focus:ring-bs-surface-3 focus:border-transparent text-sm sm:text-base"
      placeholder={currentContent.placeholder}
    />
  </div>

  <!-- Results Count -->
  <div id="results-count" class="text-center text-sm text-bs-foreground-dark mt-4 hidden">
    <span id="results-number">0</span> {currentContent.resultsCount}
  </div>

  <!-- No Results Message -->
  <div id="no-results" class="text-center py-8 hidden">
    <div class="bg-bs-surface-0/90 rounded-xl p-8 max-w-md mx-auto">
      <h3 class="bs-h3 mb-4">{currentContent.noResults}</h3>
    </div>
  </div>
</div>

<script define:vars={{ lang }}>
  class BlogSearch {
    constructor() {
      this.searchInput = document.getElementById('search-input');
      this.resultsCount = document.getElementById('results-count');
      this.resultsNumber = document.getElementById('results-number');
      this.noResults = document.getElementById('no-results');
      this.posts = [];
      this.debounceTimer = null;
      this.searchDelay = 300;
      this.resultsContainer = null;
      this.gridContainer = null;
      this.paginationContainer = null;
      this.lang = lang;

      this.init();
    }

    init() {
      if (!this.searchInput) return;

      this.gridContainer = document.querySelector('[data-posts-grid]');
      this.paginationContainer = document.querySelector('[data-pagination]');
      this.resultsContainer = document.createElement('div');
      this.resultsContainer.id = 'search-results';
      this.resultsContainer.className = 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8 mb-16 hidden';
      if (this.gridContainer && this.gridContainer.parentElement) {
        this.gridContainer.after(this.resultsContainer);
      }

      const fetchIndex = () => this.loadIndex();
      if ('requestIdleCallback' in window) {
        requestIdleCallback(fetchIndex, { timeout: 2000 });
      } else {
        setTimeout(fetchIndex, 500);
      }

      this.searchInput.addEventListener('input', () => {
        clearTimeout(this.debounceTimer);
        this.debounceTimer = setTimeout(() => {
          this.performSearch();
        }, this.searchDelay);
      });

      // Clear search on escape key
      this.searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.clearSearch();
        }
      });
    }

    async performSearch() {
      const query = this.searchInput.value.toLowerCase().trim();
      
      if (!query) {
        this.clearResults();
        return;
      }

      if (this.posts.length === 0) {
        await this.loadIndex();
      }

      const results = this.posts.filter(post => {
        const searchableText = [
          post.title,
          post.description,
          post.author,
          ...(post.tags || [])
        ].join(' ').toLowerCase();

        return searchableText.includes(query);
      });

      this.renderResults(results, query);
    }

    renderResults(results, query) {
      if (!this.resultsContainer) return;
      // Hide grid and pagination while searching
      if (this.gridContainer) this.gridContainer.classList.add('hidden');
      if (this.paginationContainer) this.paginationContainer.classList.add('hidden');

      this.resultsContainer.innerHTML = '';
      this.resultsContainer.classList.remove('hidden');

      const fragment = document.createDocumentFragment();
      results.forEach(post => {
        const article = document.createElement('article');
        article.className = '@container group';
        article.innerHTML = `
          <div class="relative isolate flex h-full w-full flex-col overflow-hidden rounded-xl bg-bs-surface-0/90 hover:bg-bs-surface-2/70 transition-colors duration-300">
            ${post.image ? `
            <div class="aspect-16-9 overflow-hidden">
              <a href="${this.lang === 'es' ? '/es/posts/' : '/posts/'}${post.slug}/" class="block w-full h-full">
                <img src="${post.image}" alt="${post.title}" class="w-full h-full object-cover object-center group-hover:scale-105 transition-transform duration-300" loading="lazy" />
              </a>
            </div>` : ''}
            <div class="p-4 sm:p-6 flex flex-col gap-3 sm:gap-4 h-full">
              <h2 class="bs-h3 line-clamp-2 flex-grow-0">
                <a href="${this.lang === 'es' ? '/es/posts/' : '/posts/'}${post.slug}/" class="hover:text-bs-foreground-light transition-colors">${this.highlightMatches(post.title, query)}</a>
              </h2>
              <p class="bs-body-text text-bs-foreground-dark line-clamp-3 flex-grow">${this.highlightMatches(post.description || '', query)}</p>
              <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between text-sm text-bs-foreground-dark mt-auto gap-1 sm:gap-0">
                <span>${post.author || ''}</span>
                <time datetime="${post.updated || post.date}">${new Date(post.updated || post.date).toLocaleDateString(this.lang === 'es' ? 'es-ES' : 'en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</time>
              </div>
            </div>
          </div>`;
        fragment.appendChild(article);
      });
      this.resultsContainer.appendChild(fragment);

      this.updateUI(results.length);
    }

    highlightMatches(text, query) {
      if (!text || !query) return text;
      const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
      return text.replace(regex, '<mark class="bg-yellow-200 text-black px-1 rounded">$1</mark>');
    }

    clearResults() {
      if (this.resultsContainer) {
        this.resultsContainer.innerHTML = '';
        this.resultsContainer.classList.add('hidden');
      }
      if (this.gridContainer) this.gridContainer.classList.remove('hidden');
      if (this.paginationContainer) this.paginationContainer.classList.remove('hidden');
      // Hide UI bits when not searching
      if (this.resultsCount) this.resultsCount.classList.add('hidden');
      if (this.noResults) this.noResults.classList.add('hidden');
    }

    async loadIndex() {
      if (this.posts.length > 0) return;
      const url = this.lang === 'es' ? '/es/posts/index.json' : '/posts/index.json';
      try {
        const res = await fetch(url, { credentials: 'same-origin' });
        if (!res.ok) return;
        const data = await res.json();
        this.posts = Array.isArray(data) ? data : data.posts || [];
      } catch (e) {
        // swallow
      }
    }

    updateUI(resultsCount) {
      this.resultsNumber.textContent = resultsCount;
      
      if (resultsCount === 0) {
        this.resultsCount.classList.add('hidden');
        this.noResults.classList.remove('hidden');
      } else {
        this.resultsCount.classList.remove('hidden');
        this.noResults.classList.add('hidden');
      }
    }

    clearSearch() {
      this.searchInput.value = '';
      this.showAllPosts();
    }
  }

  // Initialize search when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new BlogSearch();
  });
</script>