---
import { getLangFromUrl, useTranslations } from '../i18n/ui';
import { getLanguageUrls } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get language URLs using the new comprehensive utility
const languageUrls = await getLanguageUrls(Astro.url);
const { enUrl, esUrl } = languageUrls;
---

<div class="language-switcher">
  <button
    class="language-toggle bs-btn-mobile md:bs-btn md:min-w-32 flex items-center justify-center"
    aria-label="Toggle language"
    aria-expanded="false"
  >
    <span class="font-semibold text-sm md:text-base">{lang.toUpperCase()}</span>
  </button>
  
  <div
    class="language-menu absolute top-full right-0 mt-2 bg-bs-surface-0 border border-bs-surface-3 rounded-lg shadow-lg opacity-0 pointer-events-none transition-all duration-200 z-50"
    role="menu"
  >
    <a
      href={enUrl}
      data-lang="en"
      class:list={[
        'block px-4 py-2 text-sm hover:bg-bs-surface-1 transition-colors',
        { 'bg-bs-surface-1': lang === 'en' }
      ]}
      role="menuitem"
    >
      English
    </a>
    <a
      href={esUrl}
      data-lang="es"
      class:list={[
        'block px-4 py-2 text-sm hover:bg-bs-surface-1 transition-colors',
        { 'bg-bs-surface-1': lang === 'es' }
      ]}
      role="menuitem"
    >
      Espa√±ol
    </a>
  </div>
</div>

<script>
  // Use event delegation to handle all language switchers
  document.addEventListener('DOMContentLoaded', () => {
    // Handle language toggle clicks
    document.addEventListener('click', (e) => {
      const toggle = (e.target as Element).closest('.language-toggle');
      if (!toggle) return;
      
      e.preventDefault();
      const menu = toggle.parentElement?.querySelector('.language-menu');
      if (!menu) return;
      
      const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
      toggle.setAttribute('aria-expanded', (!isExpanded).toString());
      
      if (isExpanded) {
        menu.classList.add('opacity-0', 'pointer-events-none');
      } else {
        menu.classList.remove('opacity-0', 'pointer-events-none');
      }
    });
    
    // Handle language link clicks
    document.addEventListener('click', (e) => {
      const link = (e.target as Element).closest('a[data-lang]');
      if (!link) return;
      
      e.preventDefault();
      const lang = link.getAttribute('data-lang');
      if (!lang) return;
      
      // Persist language preference for 1 year
      document.cookie = `lang=${lang}; Path=/; Max-Age=31536000; SameSite=Lax`;
      window.location.assign(link.getAttribute('href') || '');
    });
    
    // Close menus when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as Element;
      if (target.closest('.language-switcher')) return;
      
      // Close all open language menus
      document.querySelectorAll('.language-menu').forEach(menu => {
        menu.classList.add('opacity-0', 'pointer-events-none');
      });
      document.querySelectorAll('.language-toggle').forEach(toggle => {
        toggle.setAttribute('aria-expanded', 'false');
      });
    });
  });
</script>

<style>
  .language-switcher {
    position: relative;
  }
</style>
