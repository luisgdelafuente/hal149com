---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

// Dynamic import of all blog images
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/blog-images/*.{jpeg,jpg,png,webp}');

export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
  quality?: 'low' | 'mid' | 'high';
}

const { 
  src, 
  alt, 
  width = 400, 
  height = 225, 
  class: className = '',
  loading = 'lazy',
  sizes = '(max-width: 380px) 320px, (max-width: 480px) 400px, (max-width: 768px) 90vw, (max-width: 1200px) 70vw, 800px',
  quality = 'mid'
} = Astro.props;

// Quality mapping
const qualityMap = {
  low: 60,
  mid: 80,
  high: 90
};

const qualityValue = qualityMap[quality];

// Function to get the image module dynamically
async function getImageModule(imagePath: string) {
  // Convert public path to assets path
  const assetPath = imagePath.replace('/blog-images/', '/src/assets/blog-images/');
  
  // Try to find the image with different extensions
  const extensions = ['.webp', '.jpg', '.jpeg', '.png'];
  
  for (const ext of extensions) {
    const pathWithoutExt = assetPath.replace(/\.(webp|jpg|jpeg|png)$/i, '');
    const fullPath = `${pathWithoutExt}${ext}`;
    
    if (images[fullPath]) {
      try {
        const module = await images[fullPath]();
        return module.default;
      } catch (error) {
        console.error(`Error loading image ${fullPath}:`, error);
      }
    }
  }
  
  return null;
}

// Get the optimized image
const imageModule = await getImageModule(src);

// Debug logging (remove in production)
if (typeof window === 'undefined') {
  console.log(`BlogImage: ${src} -> ${imageModule ? 'optimized' : 'fallback'}`);
}
---

{imageModule ? (
  <!-- Optimized Astro Image -->
  <Image
    src={imageModule}
    alt={alt}
    widths={[320, 400, 480, 600, 800]}
    sizes={sizes}
    class={className}
    loading={loading}
    quality={qualityValue}
    format="avif"
  />
) : (
  <!-- Fallback to regular img tag if not in map -->
  <img 
    src={src} 
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={loading}
  />
)}