---
import { Image } from 'astro:assets';

// Import all blog images for optimization
import aiEthicsImage from '../assets/blog-images/ai-ethics-responsibility.webp';
import aiRevolutionImage from '../assets/blog-images/ai-revolution-2024.webp';
import chatgptCitationImage from '../assets/blog-images/chatgpt-citation-guide.webp';
import machineLearningImage from '../assets/blog-images/machine-learning-basics.webp';
import llmsTxtImage from '../assets/blog-images/thellmstxtfile.webp';

const { 
  src, 
  alt, 
  width = 800, 
  height = 450, 
  class: className = '',
  format = 'webp',
  quality = 85,
  loading = 'lazy'
} = Astro.props;

// Map string paths to imported assets
const imageMap = {
  '/blog-images/ai-ethics-responsibility.webp': aiEthicsImage,
  '/blog-images/ai-revolution-2024.webp': aiRevolutionImage,
  '/blog-images/chatgpt-citation-guide.webp': chatgptCitationImage,
  '/blog-images/machine-learning-basics.webp': machineLearningImage,
  '/blog-images/thellmstxtfile.webp': llmsTxtImage,
};

// Get the optimized image or fallback to original path
const optimizedImage = imageMap[src as keyof typeof imageMap];

// Calculate responsive widths based on the original width
const responsiveWidths = [400, 600, 800, 1200].filter(w => w <= width * 1.5);

// Generate responsive sizes attribute
const sizes = responsiveWidths.length > 1 
  ? `(max-width: 640px) ${responsiveWidths[0]}px, (max-width: 1024px) ${responsiveWidths[1] || responsiveWidths[0]}px, ${responsiveWidths[responsiveWidths.length - 1]}px`
  : `${width}px`;
---

{optimizedImage ? (
  <Image
    src={optimizedImage}
    alt={alt}
    width={width}
    height={height}
    format={format}
    quality={quality}
    loading={loading}
    class={className}
    widths={responsiveWidths}
    sizes={sizes}
  />
) : (
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    class={className}
  />
)}
